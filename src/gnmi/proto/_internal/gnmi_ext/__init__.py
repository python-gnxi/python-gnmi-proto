# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: github.com/openconfig/gnmi/proto/gnmi_ext/gnmi_ext.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta

import betterproto


class ExtensionId(betterproto.Enum):
    """
    RegisteredExtension is an enumeration acting as a registry for extensions
     defined by external sources.
    """

    EID_UNSET = 0
    EID_EXPERIMENTAL = 999
    """
    An experimental extension that may be used during prototyping of a new
     extension.
    """


@dataclass(eq=False, repr=False)
class Extension(betterproto.Message):
    """The Extension message contains a single gNMI extension."""

    registered_ext: "RegisteredExtension" = betterproto.message_field(1, group="ext")
    master_arbitration: "MasterArbitration" = betterproto.message_field(2, group="ext")
    """Well known extensions."""

    history: "History" = betterproto.message_field(3, group="ext")
    commit: "Commit" = betterproto.message_field(4, group="ext")
    depth: "Depth" = betterproto.message_field(5, group="ext")


@dataclass(eq=False, repr=False)
class RegisteredExtension(betterproto.Message):
    """
    The RegisteredExtension message defines an extension which is defined outside
     of this file.
    """

    id: "ExtensionId" = betterproto.enum_field(1)
    msg: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class MasterArbitration(betterproto.Message):
    """
    MasterArbitration is used to select the master among multiple gNMI clients
     with the same Roles. The client with the largest election_id is honored as
     the master.
     The document about gNMI master arbitration can be found at
     https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
    """

    role: "Role" = betterproto.message_field(1)
    election_id: "Uint128" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Uint128(betterproto.Message):
    """Representation of unsigned 128-bit integer."""

    high: int = betterproto.uint64_field(1)
    low: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Role(betterproto.Message):
    """
    There can be one master for each role. The role is identified by its id.
    """

    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class History(betterproto.Message):
    """
    The History extension allows clients to request historical data. Its
     spec can be found at
     https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-history.md
    """

    snapshot_time: int = betterproto.int64_field(1, group="request")
    range: "TimeRange" = betterproto.message_field(2, group="request")


@dataclass(eq=False, repr=False)
class TimeRange(betterproto.Message):
    start: int = betterproto.int64_field(1)
    end: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class Commit(betterproto.Message):
    """
    Commit confirmed extension allows automated revert of the configuration after
     certain duration if an explicit confirmation is not issued. It allows
     explicit cancellation of the commit during the rollback window. There cannot
     be more than one commit active at a given time. The document about gNMI
     commit confirmed can be found at
     https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-commit-confirmed.md
    """

    id: str = betterproto.string_field(1)
    """
    ID is provided by the client during the commit request. During confirm and
     cancel actions the provided ID should match the ID provided during commit.
     If ID is not passed in any actions server shall return error.
     Required.
    """

    commit: "CommitRequest" = betterproto.message_field(2, group="action")
    """
    commit action creates a new commit. If a commit is on-going, server
     returns error.
    """

    confirm: "CommitConfirm" = betterproto.message_field(3, group="action")
    """
    confirm action will confirm an on-going commit, the ID provided during
     confirm should match the on-going commit ID.
    """

    cancel: "CommitCancel" = betterproto.message_field(4, group="action")
    """
    cancel action will cancel an on-going commit, the ID provided during
     cancel should match the on-going commit ID.
    """

    set_rollback_duration: "CommitSetRollbackDuration" = betterproto.message_field(
        5, group="action"
    )
    """
    set rollback duration action sets the rollback duration of an on-going commit
     to a new value.
     The ID provided with the Commit message should match the on-going commit ID.
    """


@dataclass(eq=False, repr=False)
class CommitRequest(betterproto.Message):
    """
    CommitRequest is used to create a new confirmed commit. It hold additional
     parameter requried for commit action.
    """

    rollback_duration: timedelta = betterproto.message_field(1)
    """
    Maximum duration to wait for a confirmaton before reverting the commit.
    """


@dataclass(eq=False, repr=False)
class CommitConfirm(betterproto.Message):
    """
    CommitConfirm is used to confirm an on-going commit. It hold additional
     parameter requried for confirm action.
    """

    pass


@dataclass(eq=False, repr=False)
class CommitCancel(betterproto.Message):
    """
    CommitCancel is used to cancel an on-going commit. It hold additional
     parameter requried for cancel action.
    """

    pass


@dataclass(eq=False, repr=False)
class CommitSetRollbackDuration(betterproto.Message):
    """
    CommitSetRollbackDuration is used to set the existing rollback duration value
     of an on-going commit to a new desired value.
    """

    rollback_duration: timedelta = betterproto.message_field(1)
    """
    Maximum duration to wait for a confirmaton before reverting the commit.
    """


@dataclass(eq=False, repr=False)
class Depth(betterproto.Message):
    """
    Depth allows clients to specify the depth of the subtree to be returned in
     the response. The depth is specified as the number of levels below the
     specified path.
     The depth is applied to all paths in the Get or Subscribe request.
     The document about gNMI depth can be found at
     https://github.com/openconfig/reference/tree/master/rpc/gnmi/gnmi-depth.md
    """

    level: int = betterproto.uint32_field(1)
    """
    The level of the subtree to be returned in the response.
     Value of 0 means no depth limit and behaves the same as if the extension
     was not specified.
     Value of 1 means only the specified path and its direct children will be
     returned.
    """
