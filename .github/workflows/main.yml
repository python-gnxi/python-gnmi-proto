name: Test Suite

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        experimental: [false]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install poetry
        shell: bash
        run: python -m pip install poetry

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Install gnmi_target
        shell: bash
        run: |
          go install -v github.com/google/gnxi/gnmi_target@latest
          echo `go env GOPATH`/bin >> $GITHUB_PATH

      - name: Run tests
        shell: bash
        run: poetry run pytest tests/
