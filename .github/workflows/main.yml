name: Test Suite

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  pre-commit:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5
        with:
          python-version: "3.13"
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: ${{ matrix.experimental }}
    needs: [ pre-commit ]
    strategy:
      matrix:
        os: [ ubuntu, windows, macos ]
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
        experimental: [ false ]
      fail-fast: false

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5
        with:
          go-version: '^1.23.0'
          cache-dependency-path: "Makefile"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full python version
        id: full-python-version
        shell: bash
        run: |
          VERSION=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Install poetry
        shell: bash
        run: python -m pip install poetry

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Install gnmi_target
        shell: bash
        run: |
          go install -v github.com/google/gnxi/gnmi_target@latest
          echo `go env GOPATH`/bin >> $GITHUB_PATH

      - name: Run tests
        shell: bash
        run: poetry run pytest tests/
